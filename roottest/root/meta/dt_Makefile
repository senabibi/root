# General indication for the size of the files
size=6
tracks=30
# Use compression or not
comp=0
# For writing of the files
action=1

# This is a template for all makefiles.

#Set the list of files to be deleted by clean (Targets can also be specified).:
CLEAN_TARGETS += $(ALL_LIBRARIES) *.log

# Set the list of target to make while testing.  By default, mytest is the
# only target added.  If the name of the target is changed in the rules then
# the name should be changed accordingly in this list.

ifeq ($(strip $(ROOTTEST_HOME)),)
   export ROOTTEST_HOME := $(shell git rev-parse --show-toplevel)/roottest/
   ifeq ($(strip $(ROOTTEST_HOME)),)
      export ROOTTEST_HOME := $(shell expr $(CURDIR) : '\(.*/roottest/\)')
   endif
endif

include $(ROOTTEST_HOME)/scripts/Rules.mk

DATAFILES = Event.new.split0.root Event.new.split1.root \
	Event.new.split2.root  Event.new.split9.root

REFFILE=dt_reference.root

OUTPUT=>/dev/null

files: $(DATAFILES)

drawtest : $(DATAFILES) $(REFFILE) dt_RunDrawTest_C.$(DllSuf)


MainEvent_cxx.$(DllSuf): MainEvent.cxx Event_cxx.$(DllSuf)
	$(BuildWithLib)

Event.new.split0.root : Event_cxx.$(DllSuf) MainEvent_cxx.$(DllSuf) makeEvent.C
	$(CMDECHO)$(CALLROOTEXE) -q -b -l "makeEvent.C( $(size), $(comp), 0, $(action), $(tracks) )" $(OUTPUT) && \
	mv Event.root Event.new.split0.root && \
	echo  "$@ made"

Event.new.split1.root : Event_cxx.$(DllSuf) MainEvent_cxx.$(DllSuf) makeEvent.C
	$(CMDECHO)$(CALLROOTEXE) -q -b -l "makeEvent.C( $(size), $(comp), 1, $(action), $(tracks) )" $(OUTPUT)  && \
	mv Event.root Event.new.split1.root && \
	echo  "$@ made"

Event.new.split2.root : Event_cxx.$(DllSuf) MainEvent_cxx.$(DllSuf) makeEvent.C
	$(CMDECHO)$(CALLROOTEXE) -q -b -l "makeEvent.C( $(size), $(comp), 2, $(action), $(tracks) )" $(OUTPUT)  && \
	mv Event.root Event.new.split2.root && \
	echo  "$@ made"

Event.new.split9.root : Event_cxx.$(DllSuf) MainEvent_cxx.$(DllSuf) makeEvent.C
	$(CMDECHO)$(CALLROOTEXE) -q -b -l "makeEvent.C( $(size), $(comp), 9, $(action), $(tracks) )" $(OUTPUT) && \
	mv Event.root Event.new.split9.root && \
	echo  "$@ made"

Event.old.streamed.root : Event_cxx.$(DllSuf) MainEvent_cxx.$(DllSuf) makeEvent.C
	$(CMDECHO)$(CALLROOTEXE) -q -b -l "makeEvent.C( $(size), $(comp), -1, $(action), $(tracks) )" $(OUTPUT) && \
	mv Event.root Event.old.streamed.root && \
	echo  "$@ made"

Event.old.split.root : Event_cxx.$(DllSuf) MainEvent_cxx.$(DllSuf) makeEvent.C
	$(CMDECHO)$(CALLROOTEXE) -q -b -l "makeEvent.C( $(size), $(comp), -2, $(action), $(tracks) )" $(OUTPUT) && \
	mv Event.root Event.old.split.root && \
	echo  "$@ made"

$(REFFILE) : dt_MakeRef.C dt_DrawTest.C Event_cxx.$(DllSuf)  Event.h Event.new.split9.root
	$(CMDECHO) $(CALLROOTEXE) -b -q -e 'gSystem->Load("Event_cxx");' 'dt_MakeRef.C("Event.new.split9.root",0);' $(OUTPUT) && \
	echo "$@ made"

ClassWarning='Warning in <TClass::TClass>: no dictionary for class'
RootPrompt='root \[0\]'
Streamer="Event::Streamer not available,"


dt_RunDrawTest_C.$(DllSuf) : dt_RunDrawTest.C dt_DrawTest.C
	$(CMDECHO) $(CALLROOTEXE) -l -b -q dt_build.C  2>&1 $(OUTPUT)| grep -v _cint.cxx && \
	echo "$@ made"

#Windows does not like piping 
#	@echo 'gSystem->Exit(!gSystem->CompileMacro("dt_RunDrawTest.C","kf"))' | $(CALLROOTEXE)  -b $(OUTPUT) &&

# teach MingW that drawtest should not be created by copying drawtest.sh
.PHONY: drawtest
